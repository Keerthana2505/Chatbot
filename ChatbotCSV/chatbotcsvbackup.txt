import nltk
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
import json
import pickle
import tensorflow as tf
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from keras.optimizers import SGD
import random
import csv

words=[]
classes = []
documents = []
ignore_words = ['?', '!']
data_file = (csv.reader(open('chat.csv', 'r', encoding='utf-8')))

intents = csv.reader(data_file)

for intent in data_file:
    for pattern in intent[2].split(','):

        #tokenize each word
        w = nltk.word_tokenize(pattern)
        words.extend(w)
        #add documents in the corpus
        documents.append((w, intent[1]))

        # add to our classes list
        if intent[1] not in classes:
            classes.append(intent[1])

# lemmaztize and lower each word and remove duplicates
words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))
# sort classes
classes = sorted(set(classes))


# documents = combination between patterns and intents
print (len(documents), "documents")
# classes = intents
print (len(classes), "classes", classes)
# words = all words, vocabulary
print (len(words), "unique lemmatized words", words)


pickle.dump(words,open('texts.pkl','wb'))
pickle.dump(classes,open('labels.pkl','wb'))

# create our training data
training = []
# create an empty array for our output
output_empty = [0] * len(classes)
# training set, bag of words for each sentence
for doc in documents:
    # initialize our bag of words
    bag = []
    # list of tokenized words for the pattern
    pattern_words = doc[0]
    # lemmatize each word - create base word, in attempt to represent related words
    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]
    # create our bag of words array with 1, if word match found in current pattern
    for word in words:
        bag.append(1) if word in pattern_words else bag.append(0)
    
    # output is a '0' for each tag and '1' for current tag (for each pattern)
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1
    
    training.append([bag, output_row])
# shuffle our features and turn into np.array
random.shuffle(training)

#training = np.array(training)
# Pad the sequences to make them of equal length
max_length = max(len(seq[0]) for seq in training)
training = [(np.pad(seq[0], (0, max_length - len(seq[0]))), seq[1]) for seq in training]

# create train and test lists. X - patterns, Y - intents
train_x = np.array([seq[0] for seq in training])
train_y = np.array([seq[1] for seq in training])
print("Training data created")


# Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons
# equal to number of intents to predict output intent with softmax
model = Sequential()
model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

# Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model
#sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
sgd = tf.keras.optimizers.legacy.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

#fitting and saving the model 
hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)
model.save('model.h5', hist)

print("model created")




App.py
import nltk
#nltk.download('popular')
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
import pickle
import numpy as np
import csv
 
from keras.models import load_model
model = load_model('model.h5')
import json
import random
 
# Load intents from CSV into a list
intents_list = list(csv.reader(open('chat.csv', 'r', encoding='utf-8')))
 
# Load other necessary data
words = pickle.load(open('texts.pkl','rb'))
classes = pickle.load(open('labels.pkl','rb'))
 
def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    return sentence_words
 
def bow(sentence, words, show_details=True):
    sentence_words = clean_up_sentence(sentence)
    bag = [0]*len(words)  
    for s in sentence_words:
        for i, w in enumerate(words):
            if w == s:
                bag[i] = 1
                if show_details:
                    print("found in bag: %s" % w)
    return np.array(bag)
 
def predict_class(sentence, model):
    p = bow(sentence, words, show_details=False)
    res = model.predict(np.array([p]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = [{"intent": classes[r[0]], "probability": str(r[1])} for r in results]
    return return_list
 
def getResponse(ints, intents_dict):
    tag = ints[0]['intent']
    result = 'Oops!! Try again'  # Initialize result with a default value
   
    if tag in intents_dict:
        responses = intents_dict[tag][3].split(',')
        print("Tag:", tag)
        print("Response:", responses)
        result = random.choice(responses)
       
    return result
 
def chatbot_response(msg):
    ints = predict_class(msg, model)
    print("Predicted ints:", ints)
    res = getResponse(ints, intents_dict)
    print("Res:", res)
   
    with open('datas.csv', 'a', newline='') as file:
        writer = csv.writer(file)
        new_row = ["", "", msg]  # Replace with your actual data
        writer.writerow(new_row)
   
    return res
 
# Convert intents_list to a dictionary for efficient lookup
intents_dict = {i[1]: i for i in intents_list}
 
from flask import Flask, render_template, request
 
app = Flask(__name__)
app.static_folder = 'static'
 
@app.route("/")
def home():
    return render_template("index.html")
 
@app.route("/get")
def get_bot_response():
    userText = request.args.get('msg')
    return chatbot_response(userText)
 
if __name__ == "__main__":
    app.run()